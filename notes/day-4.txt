service:
	class with reusable piece of code

registration:
	a. asset level (Component, Directive, Pipe)
		  @Component({providers:[]})
	b. different assets of a feature module (feature module level)
			@NgModule({providers:[]})
	c. different assets from different modules (root module level)
			@NgModule({providers:[]})

Injector: create instance and supply the reference to the asset


Http Requests:
package name: @angular/common/http
module name: HttpClientModule
HttpClient: built-in service class to make HTTP requests
provides methods such as: get(), post(), put(), delete(), patch() etc. to make HTTP requests

RxJS: 
Objects:
Observable, Subject, BehaviorSubject, ReplaySubject, Subscription, Observer etc.

Operators: (functions) => should be passed to pipe() method of Observable
map, filter, take, takeWhile, tap etc.

Component Lifecycle and lifecycle hooks (methods):
constructor
X => OnX => ngOnX
changes => OnChanges => ngOnChanges
init		=> OnInit			=> ngOnInit
destroy	

URL										METHOD		data		response
------------------------------------------------------------------------------------
http://127.0.0.1:3003/products	GET			NA				{ message:'', data:[{},{}] }
	
http://127.0.0.1:3003/products/1	GET			id				{ message:'', data:{} }		
																			{ message:'', data:null }	

http://127.0.0.1:3003/products	POST			product		{ message:'', data:[{},{}] }		
																			{ message:'', data:null }	

http://127.0.0.1:3003/products/1	PUT			id, product	{ message:'', data:[{},{}] }		
																			{ message:'', data:null }	

http://127.0.0.1:3003/products/1	DELETE		id				{ message:'', data:[{},{}] }		
																			{ message:'', data:null }

ng g c modules/products/components/add-product 
ng g c modules/products/components/view-product 
ng g c modules/products/components/edit-product 
ng g c modules/products/components/filter-product

all components must be registered with products.module.ts file

ng g c components/home
ng g c components/dashboard
ng g c components/page-not-found

all components must be registered with app.module.ts file


Routing in client-side SPA:
to decide which component to render dynamically in index.html file

package: @angular/router
module: RouterModule

services:
Router

simple classes:
Route => path, component
Route[] (Routes)

type Routes = Route[]

URL											path						component
-------------------------------------------------------
products.module.ts
localhost:4200/products 			products					PLC
localhost:4200/products/view/1 	products/view/:id		VPC
localhost:4200/products/edit/1 	products/edit/:id		EPC
localhost:4200/products/add	 	products/add				APC

auth.module.ts
localhost:4200/login				 	login							LIC
localhost:4200/register				register					RC

app.module.ts
localhost:4200/home	 				home							HC
localhost:4200							redirect to /home		HC   [Redirection route]
anything else								**								PNFC [wildcard route]











